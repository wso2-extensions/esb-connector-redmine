<?xml version="1.0" encoding="UTF-8"?>
<!--
 ~  Copyright (c) 2016, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
 ~
 ~  WSO2 Inc. licenses this file to you under the Apache License,
 ~  Version 2.0 (the "License"); you may not use this file except
 ~  in compliance with the License.
 ~  You may obtain a copy of the License at
 ~
 ~    http://www.apache.org/licenses/LICENSE-2.0
 ~
 ~  Unless required by applicable law or agreed to in writing,
 ~  software distributed under the License is distributed on an
 ~  "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 ~  KIND, either express or implied.  See the License for the
 ~  specific language governing permissions and limitations
 ~  under the License.
-->
<proxy xmlns="http://ws.apache.org/ns/synapse" name="redmine"
       transports="https,http" statistics="disable" trace="disable"
       startOnLoad="true">
    <target>
        <inSequence>
            <property name="apiUrl" expression="json-eval($.apiUrl)"/>
            <property name="apiKey" expression="json-eval($.apiKey)"/>
            <property name="responseType" expression="json-eval($.responseType)"/>
            <property name="login" expression="json-eval($.login)"/>
            <property name="password" expression="json-eval($.password)"/>
            <property name="firstname" expression="json-eval($.firstname)"/>
            <property name="lastname" expression="json-eval($.lastname)"/>
            <property name="mail" expression="json-eval($.mail)"/>
            <property name="authSourceId" expression="json-eval($.authSourceId)"/>
            <property name="id" expression="json-eval($.id)"/>
            <property name="name" expression="json-eval($.name)"/>
            <property name="identifier" expression="json-eval($.identifier)"/>
            <property name="description" expression="json-eval($.description)"/>
            <property name="include" expression="json-eval($.include)"/>
            <property name="includeGroup" expression="json-eval($.includeGroup)"/>
            <property name="projectId" expression="json-eval($.projectId)"/>
            <property name="trackerId" expression="json-eval($.trackerId)"/>
            <property name="statusId" expression="json-eval($.statusId)"/>
            <property name="priorityId" expression="json-eval($.priorityId)"/>
            <property name="subject" expression="json-eval($.subject)"/>
            <property name="categoryId" expression="json-eval($.categoryId)"/>
            <property name="fixedVersionId" expression="json-eval($.fixedVersionId)"/>
            <property name="assignedToId" expression="json-eval($.assignedToId)"/>
            <property name="parentIssueId" expression="json-eval($.parentIssueId)"/>
            <property name="customFields" expression="json-eval($.customFields)"/>
            <property name="watcherUserIds" expression="json-eval($.watcherUserIds)"/>
            <property name="uploads" expression="json-eval($.uploads)"/>
            <property name="createdOn" expression="json-eval($.createdOn)"/>
            <property name="updatedOn" expression="json-eval($.updatedOn)"/>
            <property name="offset" expression="json-eval($.offset)"/>
            <property name="limit" expression="json-eval($.limit)"/>
            <property name="sort" expression="json-eval($.sort)"/>
            <property name="notes" expression="json-eval($.notes)"/>
            <property name="issueId" expression="json-eval($.issueId)"/>
            <property name="spentOn" expression="json-eval($.spentOn)"/>
            <property name="hours" expression="json-eval($.hours)"/>
            <property name="activityId" expression="json-eval($.activityId)"/>
            <property name="comments" expression="json-eval($.comments)"/>
            <property name="attachmentId" expression="json-eval($.attachmentId)"/>
            <property name="status" expression="json-eval($.status)"/>
            <property name="name" expression="json-eval($.name)"/>
            <property name="groupId" expression="json-eval($.groupId)"/>
            <property name="userId" expression="json-eval($.userId)"/>
            <property name="name" expression="json-eval($.name)"/>
            <property name="userIds" expression="json-eval($.userIds)"/>
            <property name="deleteId" expression="json-eval($.deleteId)"/>
            <redmine.init>
                <apiUrl>{$ctx:apiUrl}</apiUrl>
                <apiKey>{$ctx:apiKey}</apiKey>
                <responseType>{$ctx:responseType}</responseType>
            </redmine.init>
            <switch source="get-property('transport', 'Action')">
                <case regex="urn:createUser">
                    <redmine.createUser>
                        <mail>{$ctx:mail}</mail>
                        <lastname>{$ctx:lastname}</lastname>
                        <login>{$ctx:login}</login>
                        <firstname>{$ctx:firstname}</firstname>
                        <password>{$ctx:password}</password>
                        <authSourceId>{$ctx:authSourceId}</authSourceId>
                    </redmine.createUser>
                </case>
                <case regex="urn:getUser">
                    <redmine.getUser>
                        <userId>{$ctx:userId}</userId>
                        <include>{$ctx:include}</include>
                    </redmine.getUser>
                </case>
                <case regex="urn:updateUser">
                    <redmine.updateUser>
                        <userId>{$ctx:userId}</userId>
                        <mail>{$ctx:mail}</mail>
                        <lastname>{$ctx:lastname}</lastname>
                        <login>{$ctx:login}</login>
                        <firstname>{$ctx:firstname}</firstname>
                        <password>{$ctx:password}</password>
                        <authSourceId>{$ctx:authSourceId}</authSourceId>
                    </redmine.updateUser>
                </case>
                <case regex="urn:deleteUser">
                    <redmine.deleteUser>
                        <userId>{$ctx:userId}</userId>
                    </redmine.deleteUser>
                </case>
                <case regex="urn:getAttachment">
                    <redmine.getAttachment>
                        <id>{$ctx:attachmentId}</id>
                    </redmine.getAttachment>
                </case>
                <case regex="urn:addAttachment">
                    <redmine.init>
                        <apiUrl>{$url:apiUrl}</apiUrl>
                        <apiKey>{$url:apiKey}</apiKey>
                        <responseType>{$url:responseType}</responseType>
                    </redmine.init>
                    <redmine.addAttachment/>
                </case>
                <case regex="urn:listUsers">
                    <redmine.listUsers>
                        <status>{$ctx:status}</status>
                        <name>{$ctx:name}</name>
                        <groupId>{$ctx:groupId}</groupId>
                    </redmine.listUsers>
                </case>
                <case regex="urn:createProject">
                    <redmine.createProject>
                        <description>{$ctx:description}</description>
                        <name>{$ctx:name}</name>
                        <identifier>{$ctx:identifier}</identifier>
                    </redmine.createProject>
                </case>
                <case regex="urn:listProjects">
                    <redmine.listProjects/>
                </case>
                <case regex="urn:getProject">
                    <redmine.getProject>
                        <id>{$ctx:id}</id>
                        <include>{$ctx:include}</include>
                    </redmine.getProject>
                </case>
                <case regex="urn:updateProject">
                    <redmine.updateProject>
                        <id>{$ctx:id}</id>
                        <description>{$ctx:description}</description>
                        <name>{$ctx:name}</name>
                        <identifier>{$ctx:identifier}</identifier>
                    </redmine.updateProject>
                </case>
                <case regex="urn:deleteProject">
                    <redmine.deleteProject>
                        <id>{$ctx:id}</id>
                    </redmine.deleteProject>
                </case>
                <case regex="urn:createIssue">
                    <redmine.createIssue>
                        <subject>{$ctx:subject}</subject>
                        <categoryId>{$ctx:categoryId}</categoryId>
                        <parentIssueId>{$ctx:parentIssueId}</parentIssueId>
                        <watcherUserIds>{$ctx:watcherUserIds}</watcherUserIds>
                        <fixedVersionId>{$ctx:fixedVersionId}</fixedVersionId>
                        <projectId>{$ctx:projectId}</projectId>
                        <uploads>{$ctx:uploads}</uploads>
                        <trackerId>{$ctx:trackerId}</trackerId>
                        <statusId>{$ctx:statusId}</statusId>
                        <description>{$ctx:description}</description>
                        <priorityId>{$ctx:priorityId}</priorityId>
                        <customFields>{$ctx:customFields}</customFields>
                        <assignedToId>{$ctx:assignedToId}</assignedToId>
                    </redmine.createIssue>
                </case>
                <case regex="urn:updateIssue">
                    <redmine.updateIssue>
                        <subject>{$ctx:subject}</subject>
                        <categoryId>{$ctx:categoryId}</categoryId>
                        <parentIssueId>{$ctx:parentIssueId}</parentIssueId>
                        <watcherUserIds>{$ctx:watcherUserIds}</watcherUserIds>
                        <fixedVersionId>{$ctx:fixedVersionId}</fixedVersionId>
                        <projectId>{$ctx:projectId}</projectId>
                        <uploads>{$ctx:uploads}</uploads>
                        <trackerId>{$ctx:trackerId}</trackerId>
                        <id>{$ctx:id}</id>
                        <statusId>{$ctx:statusId}</statusId>
                        <description>{$ctx:description}</description>
                        <priorityId>{$ctx:priorityId}</priorityId>
                        <customFields>{$ctx:customFields}</customFields>
                        <assignedToId>{$ctx:assignedToId}</assignedToId>
                        <notes>{$ctx:notes}</notes>
                    </redmine.updateIssue>
                </case>
                <case regex="urn:deleteIssue">
                    <redmine.deleteIssue>
                        <id>{$ctx:id}</id>
                    </redmine.deleteIssue>
                </case>
                <case regex="urn:getIssue">
                    <redmine.getIssue>
                        <id>{$ctx:id}</id>
                        <include>{$ctx:include}</include>
                    </redmine.getIssue>
                </case>
                <case regex="urn:createTimeEntry">
                    <redmine.createTimeEntry>
                        <projectId>{$ctx:projectId}</projectId>
                        <issueId>{$ctx:issueId}</issueId>
                        <spentOn>{$ctx:spentOn}</spentOn>
                        <hours>{$ctx:hours}</hours>
                        <activityId>{$ctx:activityId}</activityId>
                        <comments>{$ctx:comments}</comments>
                    </redmine.createTimeEntry>
                </case>
                <case regex="urn:updateTimeEntry">
                    <redmine.updateTimeEntry>
                        <id>{$ctx:id}</id>
                        <projectId>{$ctx:projectId}</projectId>
                        <issueId>{$ctx:issueId}</issueId>
                        <spentOn>{$ctx:spentOn}</spentOn>
                        <hours>{$ctx:hours}</hours>
                        <activityId>{$ctx:activityId}</activityId>
                        <comments>{$ctx:comments}</comments>
                    </redmine.updateTimeEntry>
                </case>
                <case regex="urn:deleteTimeEntry">
                    <redmine.deleteTimeEntry>
                        <id>{$ctx:id}</id>
                    </redmine.deleteTimeEntry>
                </case>
                <case regex="urn:getTimeEntry">
                    <redmine.getTimeEntry>
                        <id>{$ctx:id}</id>
                    </redmine.getTimeEntry>
                </case>
                <case regex="urn:listTimeEntries">
                    <redmine.listTimeEntries/>
                </case>
                <case regex="urn:listIssues">
                    <redmine.listIssues>
                        <statusId>{$ctx:statusId}</statusId>
                        <limit>{$ctx:limit}</limit>
                        <sort>{$ctx:sort}</sort>
                        <assignedToId>{$ctx:assignedToId}</assignedToId>
                        <projectId>{$ctx:projectId}</projectId>
                        <offset>{$ctx:offset}</offset>
                        <customFields>{$ctx:customFields}</customFields>
                        <trackerId>{$ctx:trackerId}</trackerId>
                        <createdOn>{$ctx:createdOn}</createdOn>
                        <updatedOn>{$ctx:updatedOn}</updatedOn>
                    </redmine.listIssues>
                </case>
                <case regex="urn:getGroups">
                    <redmine.getGroups>
                    </redmine.getGroups>
                </case>
                <case regex="urn:getSingleGroup">
                    <redmine.getSingleGroup>
                        <id>{$ctx:id}</id>
                        <includeGroup>{$ctx:includeGroup}</includeGroup>
                    </redmine.getSingleGroup>
                </case>
                <case regex="urn:getCustomFields">
                    <redmine.getCustomFields>
                    </redmine.getCustomFields>
                </case>
                <case regex="urn:createGroup">
                    <redmine.createGroup>
                        <name>{$ctx:name}</name>
                        <userIds>{$ctx:userIds}</userIds>
                    </redmine.createGroup>
                </case>
                <case regex="urn:deleteGroup">
                    <redmine.deleteGroup>
                        <groupId>{$ctx:groupId}</groupId>
                    </redmine.deleteGroup>
                </case>
                <case regex="urn:addUserToGroup">
                    <redmine.addUserToGroup>
                        <groupId>{$ctx:groupId}</groupId>
                        <userId>{$ctx:userId}</userId>
                    </redmine.addUserToGroup>
                </case>
            </switch>
            <filter source="$axis2:HTTP_SC" regex="^[^2][0-9][0-9]">
                <then>
                    <switch source="$axis2:HTTP_SC">
                        <case regex="401">
                            <property name="ERROR_CODE" value="600401"/>
                            <property name="ERROR_MESSAGE" value="Authorization failed."/>
                        </case>
                        <case regex="422">
                            <property name="ERROR_CODE" value="600422"/>
                            <property name="ERROR_MESSAGE" expression="//errors"/>
                        </case>
                        <case regex="404">
                            <property name="ERROR_CODE" value="600404"/>
                            <property name="ERROR_MESSAGE" value="Resource not found."/>
                        </case>
                        <case regex="403">
                            <property name="ERROR_CODE" value="600403"/>
                            <property name="ERROR_MESSAGE" value="Forbidden operation."/>
                        </case>
                        <case regex="400">
                            <property name="ERROR_CODE" value="600400"/>
                            <property name="ERROR_MESSAGE" value="Bad request."/>
                        </case>
                        <case regex="500">
                            <property name="ERROR_CODE" value="600500"/>
                            <property name="ERROR_MESSAGE" value="Internal Server Error."/>
                        </case>
                        <default>
                            <property name="ERROR_CODE" expression="$axis2:HTTP_SC"/>
                            <property name="ERROR_MESSAGE" value="An error occurred."/>
                        </default>
                    </switch>
                    <sequence xmlns="http://ws.apache.org/ns/synapse" name="faultHandlerSeq">
                        <property name="contentTypeValue"
                                  expression="get-property('transport', 'Content-Type')"></property>
                        <filter source="get-property('ERROR_CODE')"
                                regex="[1|3|4][0-9][0-9][0-9][0-9][0-9]">
                            <then>
                                <header name="X-Redmine-API-Key" scope="transport"
                                        action="remove"></header>
                                <property name="HTTP_SC" value="500" scope="axis2"></property>
                            </then>
                        </filter>
                        <filter source="get-property('ERROR_CODE')"
                                regex="[0]">
                            <then>
                                <header name="X-Redmine-API-Key" scope="transport"
                                        action="remove"></header>
                                <property name="ERROR_CODE" value="600500"></property>
                                <property name="ERROR_MESSAGE"
                                          value="Internal Server Error. Refer HTTP Status Code."></property>
                            </then>
                        </filter>
                        <filter
                                xpath="get-property('contentTypeValue') = 'application/json' or get-property('contentTypeValue') = 'text/json' or get-property('contentTypeValue') = 'application/json; charset=utf-8' or get-property('contentTypeValue') = 'text/html; charset=utf-8'">
                            <then>
                                <filter
                                        xpath="get-property('error_description') = '' or (not(string(get-property('error_description'))))">
                                    <then>
                                        <payloadFactory media-type="json">
                                            <format>{ "error_code":"$1", "error_message":"$2" }
                                            </format>
                                            <args>
                                                <arg expression="get-property('ERROR_CODE')" evaluator="xml"></arg>
                                                <arg expression="get-property('ERROR_MESSAGE')"
                                                     evaluator="xml"></arg>
                                            </args>
                                        </payloadFactory>
                                        <property name="messageType" value="application/json"
                                                  scope="axis2"></property>
                                    </then>
                                    <else>
                                        <payloadFactory media-type="json">
                                            <format>{ "error_code":"$1", "error_message":"$2"
                                                ,"error_description":"$3" }
                                            </format>
                                            <args>
                                                <arg expression="get-property('ERROR_CODE')" evaluator="xml"></arg>
                                                <arg expression="get-property('ERROR_MESSAGE')"
                                                     evaluator="xml"></arg>
                                                <arg expression="get-property('error_description')"
                                                     evaluator="xml"></arg>
                                            </args>
                                        </payloadFactory>
                                        <property name="messageType" value="application/json"
                                                  scope="axis2"></property>
                                    </else>
                                </filter>
                            </then>
                            <else>
                                <filter
                                        xpath="get-property('error_description') = '' or (not(string(get-property('error_description'))))">
                                    <then>
                                        <payloadFactory media-type="xml">
                                            <format>
                                                <error_info>
                                                    <error_code>$1</error_code>
                                                    <error_message>$2</error_message>
                                                </error_info>
                                            </format>
                                            <args>
                                                <arg expression="get-property('ERROR_CODE')" evaluator="xml"></arg>
                                                <arg expression="get-property('ERROR_MESSAGE')"
                                                     evaluator="xml"></arg>
                                            </args>
                                        </payloadFactory>
                                        <property name="messageType" value="application/xml"
                                                  scope="axis2"></property>
                                    </then>
                                    <else>
                                        <payloadFactory media-type="xml">
                                            <format>
                                                <error_info>
                                                    <error_code>$1</error_code>
                                                    <error_message>$2</error_message>
                                                    <error_description>$3</error_description>
                                                </error_info>
                                            </format>
                                            <args>
                                                <arg expression="get-property('ERROR_CODE')" evaluator="xml"></arg>
                                                <arg expression="get-property('ERROR_MESSAGE')"
                                                     evaluator="xml"></arg>
                                                <arg expression="get-property('error_description')"
                                                     evaluator="xml"></arg>
                                            </args>
                                        </payloadFactory>
                                        <property name="messageType" value="application/xml"
                                                  scope="axis2"></property>
                                    </else>
                                </filter>
                            </else>
                        </filter>
                        <respond/>
                    </sequence>
                </then>
            </filter>
            <respond/>
        </inSequence>
    </target>
</proxy>